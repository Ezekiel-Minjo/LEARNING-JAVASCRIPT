/*
========================================
 First-Class & Higher-Order Functions
========================================

ðŸ”¹ First-Class Functions (Concept):
- In JS, functions are treated as values (aka "first-class citizens").
- Functions are just another type of object.
- This means:
  âœ“ Functions can be stored in variables or object properties.
  âœ“ Functions can be passed as arguments.
  âœ“ Functions can be returned from other functions.
  âœ“ Functions can have their own methods (e.g. .bind()).

ðŸ”¹ Example:
const greet = () => console.log('Hello');
button.addEventListener('click', greet);
// 'greet' is passed as a callback â€” it's just a value.

ðŸ”¹ Higher-Order Functions (Practical):
- A higher-order function does **one of two things**:
  1. Takes another function as an argument.
  2. Returns a new function.

Examples:
1. `addEventListener('click', greet)` â†’ receives a function â†’ Higher-Order
2. `function multiplier(factor) { return function(x) { return x * factor; } }` â†’ returns a function â†’ Higher-Order

ðŸ”¹ Callback Function:
- A function passed into another function to be "called back" later.
- Common in event handling, timers, array methods, etc.

ðŸ”¹ First-Class vs Higher-Order:
- **First-Class** = concept: functions are values.
- **Higher-Order** = practical: functions that take/return functions.
- First-class functions **enable** higher-order functions.

*/
